package com.mavixk.ds.Hashing;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;

public class Sum4Demo {

  public static void main(String[] args) throws FileNotFoundException {
    Integer[] a = {9, -8, -10, -7, 7, -8, 2, -7, 4, 7, 0, -3, -4, -5, -1, -4, 5, 8, 1, 9, -2, 5,
        10, -5, -7, -1, -6, 4, 1, -5, 3, 8, -4, -10, -9, -3, 10, 0, 7, 9, -8, 10, -9, 7, 8, 0, 6,
        -6, -7, 6, -4, 2, 0, 10, 1, -2, 5, -2};
    ArrayList<Integer> v = new ArrayList<Integer>(Arrays.asList(a));
    String test = "{[-10 -10 10 10 ] [-10 -9 9 10 ] [-10 -8 8 10 ] [-10 -8 9 9 ] [-10 -7 7 10 ] "
        + "[-10 -7 8 9 ] [-10 -6 6 10 ] [-10 -6 7 9 ] [-10 -6 8 8 ] [-10 -5 5 10 ] [-10 -5 6 9 ] "
        + "[-10 -5 7 8 ] [-10 -4 4 10 ] [-10 -4 5 9 ] [-10 -4 6 8 ] [-10 -4 7 7 ] [-10 -3 3 10 ] "
        + "[-10 -3 4 9 ] [-10 -3 5 8 ] [-10 -3 6 7 ] [-10 -2 2 10 ] [-10 -2 3 9 ] [-10 -2 4 8 ] [-10 -2 5 7 ] [-10 -2 6 6 ] [-10 -1 1 10 ] [-10 -1 2 9 ] [-10 -1 3 8 ] [-10 -1 4 7 ] [-10 -1 5 6 ] [-10 0 0 10 ] [-10 0 1 9 ] [-10 0 2 8 ] [-10 0 3 7 ] [-10 0 4 6 ] [-10 0 5 5 ] [-10 1 1 8 ] [-10 1 2 7 ] [-10 1 3 6 ] [-10 1 4 5 ] [-10 2 2 6 ] [-10 2 3 5 ] [-10 2 4 4 ] [-9 -9 8 10 ] [-9 -9 9 9 ] [-9 -8 7 10 ] [-9 -8 8 9 ] [-9 -7 6 10 ] [-9 -7 7 9 ] [-9 -7 8 8 ] [-9 -6 5 10 ] [-9 -6 6 9 ] [-9 -6 7 8 ] [-9 -5 4 10 ] [-9 -5 5 9 ] [-9 -5 6 8 ] [-9 -5 7 7 ] [-9 -4 3 10 ] [-9 -4 4 9 ] [-9 -4 5 8 ] [-9 -4 6 7 ] [-9 -3 2 10 ] [-9 -3 3 9 ] [-9 -3 4 8 ] [-9 -3 5 7 ] [-9 -3 6 6 ] [-9 -2 1 10 ] [-9 -2 2 9 ] [-9 -2 3 8 ] [-9 -2 4 7 ] [-9 -2 5 6 ] [-9 -1 0 10 ] [-9 -1 1 9 ] [-9 -1 2 8 ] [-9 -1 3 7 ] [-9 -1 4 6 ] [-9 -1 5 5 ] [-9 0 0 9 ] [-9 0 1 8 ] [-9 0 2 7 ] [-9 0 3 6 ] [-9 0 4 5 ] [-9 1 1 7 ] [-9 1 2 6 ] [-9 1 3 5 ] [-9 1 4 4 ] [-9 2 2 5 ] [-9 2 3 4 ] [-8 -8 6 10 ] [-8 -8 7 9 ] [-8 -8 8 8 ] [-8 -7 5 10 ] [-8 -7 6 9 ] [-8 -7 7 8 ] [-8 -6 4 10 ] [-8 -6 5 9 ] [-8 -6 6 8 ] [-8 -6 7 7 ] [-8 -5 3 10 ] [-8 -5 4 9 ] [-8 -5 5 8 ] [-8 -5 6 7 ] [-8 -4 2 10 ] [-8 -4 3 9 ] [-8 -4 4 8 ] [-8 -4 5 7 ] [-8 -4 6 6 ] [-8 -3 1 10 ] [-8 -3 2 9 ] [-8 -3 3 8 ] [-8 -3 4 7 ] [-8 -3 5 6 ] [-8 -2 0 10 ] [-8 -2 1 9 ] [-8 -2 2 8 ] [-8 -2 3 7 ] [-8 -2 4 6 ] [-8 -2 5 5 ] [-8 -1 -1 10 ] [-8 -1 0 9 ] [-8 -1 1 8 ] [-8 -1 2 7 ] [-8 -1 3 6 ] [-8 -1 4 5 ] [-8 0 0 8 ] [-8 0 1 7 ] [-8 0 2 6 ] [-8 0 3 5 ] [-8 0 4 4 ] [-8 1 1 6 ] [-8 1 2 5 ] [-8 1 3 4 ] [-8 2 2 4 ] [-7 -7 4 10 ] [-7 -7 5 9 ] [-7 -7 6 8 ] [-7 -7 7 7 ] [-7 -6 3 10 ] [-7 -6 4 9 ] [-7 -6 5 8 ] [-7 -6 6 7 ] [-7 -5 2 10 ] [-7 -5 3 9 ] [-7 -5 4 8 ] [-7 -5 5 7 ] [-7 -5 6 6 ] [-7 -4 1 10 ] [-7 -4 2 9 ] [-7 -4 3 8 ] [-7 -4 4 7 ] [-7 -4 5 6 ] [-7 -3 0 10 ] [-7 -3 1 9 ] [-7 -3 2 8 ] [-7 -3 3 7 ] [-7 -3 4 6 ] [-7 -3 5 5 ] [-7 -2 -1 10 ] [-7 -2 0 9 ] [-7 -2 1 8 ] [-7 -2 2 7 ] [-7 -2 3 6 ] [-7 -2 4 5 ] [-7 -1 -1 9 ] [-7 -1 0 8 ] [-7 -1 1 7 ] [-7 -1 2 6 ] [-7 -1 3 5 ] [-7 -1 4 4 ] [-7 0 0 7 ] [-7 0 1 6 ] [-7 0 2 5 ] [-7 0 3 4 ] [-7 1 1 5 ] [-7 1 2 4 ] [-7 2 2 3 ] [-6 -6 2 10 ] [-6 -6 3 9 ] [-6 -6 4 8 ] [-6 -6 5 7 ] [-6 -6 6 6 ] [-6 -5 1 10 ] [-6 -5 2 9 ] [-6 -5 3 8 ] [-6 -5 4 7 ] [-6 -5 5 6 ] [-6 -4 0 10 ] [-6 -4 1 9 ] [-6 -4 2 8 ] [-6 -4 3 7 ] [-6 -4 4 6 ] [-6 -4 5 5 ] [-6 -3 -1 10 ] [-6 -3 0 9 ] [-6 -3 1 8 ] [-6 -3 2 7 ] [-6 -3 3 6 ] [-6 -3 4 5 ] [-6 -2 -2 10 ] [-6 -2 -1 9 ] [-6 -2 0 8 ] [-6 -2 1 7 ] [-6 -2 2 6 ] [-6 -2 3 5 ] [-6 -2 4 4 ] [-6 -1 -1 8 ] [-6 -1 0 7 ] [-6 -1 1 6 ] [-6 -1 2 5 ] [-6 -1 3 4 ] [-6 0 0 6 ] [-6 0 1 5 ] [-6 0 2 4 ] [-6 1 1 4 ] [-6 1 2 3 ] [-5 -5 0 10 ] [-5 -5 1 9 ] [-5 -5 2 8 ] [-5 -5 3 7 ] [-5 -5 4 6 ] [-5 -5 5 5 ] [-5 -4 -1 10 ] [-5 -4 0 9 ] [-5 -4 1 8 ] [-5 -4 2 7 ] [-5 -4 3 6 ] [-5 -4 4 5 ] [-5 -3 -2 10 ] [-5 -3 -1 9 ] [-5 -3 0 8 ] [-5 -3 1 7 ] [-5 -3 2 6 ] [-5 -3 3 5 ] [-5 -3 4 4 ] [-5 -2 -2 9 ] [-5 -2 -1 8 ] [-5 -2 0 7 ] [-5 -2 1 6 ] [-5 -2 2 5 ] [-5 -2 3 4 ] [-5 -1 -1 7 ] [-5 -1 0 6 ] [-5 -1 1 5 ] [-5 -1 2 4 ] [-5 0 0 5 ] [-5 0 1 4 ] [-5 0 2 3 ] [-5 1 1 3 ] [-5 1 2 2 ] [-4 -4 -2 10 ] [-4 -4 -1 9 ] [-4 -4 0 8 ] [-4 -4 1 7 ] [-4 -4 2 6 ] [-4 -4 3 5 ] [-4 -4 4 4 ] [-4 -3 -3 10 ] [-4 -3 -2 9 ] [-4 -3 -1 8 ] [-4 -3 0 7 ] [-4 -3 1 6 ] [-4 -3 2 5 ] [-4 -3 3 4 ] [-4 -2 -2 8 ] [-4 -2 -1 7 ] [-4 -2 0 6 ] [-4 -2 1 5 ] [-4 -2 2 4 ] [-4 -1 -1 6 ] [-4 -1 0 5 ] [-4 -1 1 4 ] [-4 -1 2 3 ] [-4 0 0 4 ] [-4 0 1 3 ] [-4 0 2 2 ] [-4 1 1 2 ] [-3 -3 -2 8 ] [-3 -3 -1 7 ] [-3 -3 0 6 ] [-3 -3 1 5 ] [-3 -3 2 4 ] [-3 -2 -2 7 ] [-3 -2 -1 6 ] [-3 -2 0 5 ] [-3 -2 1 4 ] [-3 -2 2 3 ] [-3 -1 -1 5 ] [-3 -1 0 4 ] [-3 -1 1 3 ] [-3 -1 2 2 ] [-3 0 0 3 ] [-3 0 1 2 ] [-3 1 1 1 ] [-2 -2 -2 6 ] [-2 -2 -1 5 ] [-2 -2 0 4 ] [-2 -2 1 3 ] [-2 -2 2 2 ] [-2 -1 -1 4 ] [-2 -1 0 3 ] [-2 -1 1 2 ] [-2 0 0 2 ] [-2 0 1 1 ] [-1 -1 0 2 ] [-1 -1 1 1 ] [-1 0 0 1 ] [0 0 0 0 ]}";
    test = test.replace('[', '{');
    test = test.replace(']', '}');
    test = test.replace(' ', ',');
    //System.out.println(test);
    int[][] s = {{-10, -10, 10, 10,}, {-10, -9, 9, 10,}, {-10, -8, 8, 10,}, {-10, -8, 9, 9,},
        {-10, -7, 7, 10,}, {-10, -7, 8, 9,}, {-10, -6, 6, 10,}, {-10, -6, 7, 9,}, {-10, -6, 8, 8,},
        {-10, -5, 5, 10,},
        {-10, -5, 6, 9,}, {-10, -5, 7, 8,}, {-10, -4, 4, 10,}, {-10, -4, 5, 9,}, {-10, -4, 6, 8,},
        {-10, -4, 7, 7,}, {-10, -3, 3, 10,}, {-10, -3, 4, 9,}, {-10, -3, 5, 8,}, {-10, -3, 6, 7,},
        {-10, -2, 2, 10,}, {-10, -2, 3, 9,}, {-10, -2, 4, 8,}, {-10, -2, 5, 7,}, {-10, -2, 6, 6,},
        {-10, -1, 1, 10,}, {-10, -1, 2, 9,}, {-10, -1, 3, 8,}, {-10, -1, 4, 7,}, {-10, -1, 5, 6,},
        {-10, 0, 0, 10,}, {-10, 0, 1, 9,}, {-10, 0, 2, 8,}, {-10, 0, 3, 7,}, {-10, 0, 4, 6,},
        {-10, 0, 5, 5,}, {-10, 1, 1, 8,}, {-10, 1, 2, 7,}, {-10, 1, 3, 6,}, {-10, 1, 4, 5,},
        {-10, 2, 2, 6,}, {-10, 2, 3, 5,}, {-10, 2, 4, 4,}, {-9, -9, 8, 10,}, {-9, -9, 9, 9,},
        {-9, -8, 7, 10,}, {-9, -8, 8, 9,}, {-9, -7, 6, 10,}, {-9, -7, 7, 9,}, {-9, -7, 8, 8,},
        {-9, -6, 5, 10,}, {-9, -6, 6, 9,}, {-9, -6, 7, 8,}, {-9, -5, 4, 10,}, {-9, -5, 5, 9,},
        {-9, -5, 6, 8,}, {-9, -5, 7, 7,}, {-9, -4, 3, 10,}, {-9, -4, 4, 9,}, {-9, -4, 5, 8,},
        {-9, -4, 6, 7,}, {-9, -3, 2, 10,}, {-9, -3, 3, 9,}, {-9, -3, 4, 8,}, {-9, -3, 5, 7,},
        {-9, -3, 6, 6,}, {-9, -2, 1, 10,}, {-9, -2, 2, 9,}, {-9, -2, 3, 8,}, {-9, -2, 4, 7,},
        {-9, -2, 5, 6,}, {-9, -1, 0, 10,}, {-9, -1, 1, 9,}, {-9, -1, 2, 8,}, {-9, -1, 3, 7,},
        {-9, -1, 4, 6,}, {-9, -1, 5, 5,}, {-9, 0, 0, 9,}, {-9, 0, 1, 8,}, {-9, 0, 2, 7,},
        {-9, 0, 3, 6,}, {-9, 0, 4, 5,}, {-9, 1, 1, 7,}, {-9, 1, 2, 6,}, {-9, 1, 3, 5,},
        {-9, 1, 4, 4,}, {-9, 2, 2, 5,}, {-9, 2, 3, 4,}, {-8, -8, 6, 10,}, {-8, -8, 7, 9,},
        {-8, -8, 8, 8,}, {-8, -7, 5, 10,}, {-8, -7, 6, 9,}, {-8, -7, 7, 8,}, {-8, -6, 4, 10,},
        {-8, -6, 5, 9,}, {-8, -6, 6, 8,}, {-8, -6, 7, 7,}, {-8, -5, 3, 10,}, {-8, -5, 4, 9,},
        {-8, -5, 5, 8,}, {-8, -5, 6, 7,}, {-8, -4, 2, 10,}, {-8, -4, 3, 9,}, {-8, -4, 4, 8,},
        {-8, -4, 5, 7,}, {-8, -4, 6, 6,}, {-8, -3, 1, 10,}, {-8, -3, 2, 9,}, {-8, -3, 3, 8,},
        {-8, -3, 4, 7,}, {-8, -3, 5, 6,}, {-8, -2, 0, 10,}, {-8, -2, 1, 9,}, {-8, -2, 2, 8,},
        {-8, -2, 3, 7,}, {-8, -2, 4, 6,}, {-8, -2, 5, 5,}, {-8, -1, -1, 10,}, {-8, -1, 0, 9,},
        {-8, -1, 1, 8,}, {-8, -1, 2, 7,}, {-8, -1, 3, 6,}, {-8, -1, 4, 5,}, {-8, 0, 0, 8,},
        {-8, 0, 1, 7,}, {-8, 0, 2, 6,}, {-8, 0, 3, 5,}, {-8, 0, 4, 4,}, {-8, 1, 1, 6,},
        {-8, 1, 2, 5,}, {-8, 1, 3, 4,}, {-8, 2, 2, 4,}, {-7, -7, 4, 10,}, {-7, -7, 5, 9,},
        {-7, -7, 6, 8,}, {-7, -7, 7, 7,}, {-7, -6, 3, 10,}, {-7, -6, 4, 9,}, {-7, -6, 5, 8,},
        {-7, -6, 6, 7,}, {-7, -5, 2, 10,}, {-7, -5, 3, 9,}, {-7, -5, 4, 8,}, {-7, -5, 5, 7,},
        {-7, -5, 6, 6,}, {-7, -4, 1, 10,}, {-7, -4, 2, 9,}, {-7, -4, 3, 8,}, {-7, -4, 4, 7,},
        {-7, -4, 5, 6,}, {-7, -3, 0, 10,}, {-7, -3, 1, 9,}, {-7, -3, 2, 8,}, {-7, -3, 3, 7,},
        {-7, -3, 4, 6,}, {-7, -3, 5, 5,}, {-7, -2, -1, 10,}, {-7, -2, 0, 9,}, {-7, -2, 1, 8,},
        {-7, -2, 2, 7,}, {-7, -2, 3, 6,}, {-7, -2, 4, 5,}, {-7, -1, -1, 9,}, {-7, -1, 0, 8,},
        {-7, -1, 1, 7,}, {-7, -1, 2, 6,}, {-7, -1, 3, 5,}, {-7, -1, 4, 4,}, {-7, 0, 0, 7,},
        {-7, 0, 1, 6,}, {-7, 0, 2, 5,}, {-7, 0, 3, 4,}, {-7, 1, 1, 5,}, {-7, 1, 2, 4,},
        {-7, 2, 2, 3,}, {-6, -6, 2, 10,}, {-6, -6, 3, 9,}, {-6, -6, 4, 8,}, {-6, -6, 5, 7,},
        {-6, -6, 6, 6,}, {-6, -5, 1, 10,}, {-6, -5, 2, 9,}, {-6, -5, 3, 8,}, {-6, -5, 4, 7,},
        {-6, -5, 5, 6,}, {-6, -4, 0, 10,}, {-6, -4, 1, 9,}, {-6, -4, 2, 8,}, {-6, -4, 3, 7,},
        {-6, -4, 4, 6,}, {-6, -4, 5, 5,}, {-6, -3, -1, 10,}, {-6, -3, 0, 9,}, {-6, -3, 1, 8,},
        {-6, -3, 2, 7,}, {-6, -3, 3, 6,}, {-6, -3, 4, 5,}, {-6, -2, -2, 10,}, {-6, -2, -1, 9,},
        {-6, -2, 0, 8,}, {-6, -2, 1, 7,}, {-6, -2, 2, 6,}, {-6, -2, 3, 5,}, {-6, -2, 4, 4,},
        {-6, -1, -1, 8,}, {-6, -1, 0, 7,}, {-6, -1, 1, 6,}, {-6, -1, 2, 5,}, {-6, -1, 3, 4,},
        {-6, 0, 0, 6,}, {-6, 0, 1, 5,}, {-6, 0, 2, 4,}, {-6, 1, 1, 4,}, {-6, 1, 2, 3,},
        {-5, -5, 0, 10,}, {-5, -5, 1, 9,}, {-5, -5, 2, 8,}, {-5, -5, 3, 7,}, {-5, -5, 4, 6,},
        {-5, -5, 5, 5,}, {-5, -4, -1, 10,}, {-5, -4, 0, 9,}, {-5, -4, 1, 8,}, {-5, -4, 2, 7,},
        {-5, -4, 3, 6,}, {-5, -4, 4, 5,}, {-5, -3, -2, 10,}, {-5, -3, -1, 9,}, {-5, -3, 0, 8,},
        {-5, -3, 1, 7,}, {-5, -3, 2, 6,}, {-5, -3, 3, 5,}, {-5, -3, 4, 4,}, {-5, -2, -2, 9,},
        {-5, -2, -1, 8,}, {-5, -2, 0, 7,}, {-5, -2, 1, 6,}, {-5, -2, 2, 5,}, {-5, -2, 3, 4,},
        {-5, -1, -1, 7,}, {-5, -1, 0, 6,}, {-5, -1, 1, 5,}, {-5, -1, 2, 4,}, {-5, 0, 0, 5,},
        {-5, 0, 1, 4,}, {-5, 0, 2, 3,}, {-5, 1, 1, 3,}, {-5, 1, 2, 2,}, {-4, -4, -2, 10,},
        {-4, -4, -1, 9,}, {-4, -4, 0, 8,}, {-4, -4, 1, 7,}, {-4, -4, 2, 6,}, {-4, -4, 3, 5,},
        {-4, -4, 4, 4,}, {-4, -3, -3, 10,}, {-4, -3, -2, 9,}, {-4, -3, -1, 8,}, {-4, -3, 0, 7,},
        {-4, -3, 1, 6,}, {-4, -3, 2, 5,}, {-4, -3, 3, 4,}, {-4, -2, -2, 8,}, {-4, -2, -1, 7,},
        {-4, -2, 0, 6,}, {-4, -2, 1, 5,}, {-4, -2, 2, 4,}, {-4, -1, -1, 6,}, {-4, -1, 0, 5,},
        {-4, -1, 1, 4,}, {-4, -1, 2, 3,}, {-4, 0, 0, 4,}, {-4, 0, 1, 3,}, {-4, 0, 2, 2,},
        {-4, 1, 1, 2,}, {-3, -3, -2, 8,}, {-3, -3, -1, 7,}, {-3, -3, 0, 6,}, {-3, -3, 1, 5,},
        {-3, -3, 2, 4,}, {-3, -2, -2, 7,}, {-3, -2, -1, 6,}, {-3, -2, 0, 5,}, {-3, -2, 1, 4,},
        {-3, -2, 2, 3,}, {-3, -1, -1, 5,}, {-3, -1, 0, 4,}, {-3, -1, 1, 3,}, {-3, -1, 2, 2,},
        {-3, 0, 0, 3,}, {-3, 0, 1, 2,}, {-3, 1, 1, 1,}, {-2, -2, -2, 6,}, {-2, -2, -1, 5,},
        {-2, -2, 0, 4,}, {-2, -2, 1, 3,}, {-2, -2, 2, 2,}, {-2, -1, -1, 4,}, {-2, -1, 0, 3,},
        {-2, -1, 1, 2,}, {-2, 0, 0, 2,}, {-2, 0, 1, 1,}, {-1, -1, 0, 2,}, {-1, -1, 1, 1,},
        {-1, 0, 0, 1,}, {0, 0, 0, 0,}};

    ArrayList<ArrayList<Integer>> p = fourSum(v,0);
    System.out.println(s.length + " " + p.size());
    System.out.println(test);
    System.out.println(p);

  }

  /**
   * Finds unique quadruplets with given sum k
   * @param a
   * @param k
   * @return
   */
  public static ArrayList<ArrayList<Integer>> fourSum(ArrayList<Integer> a, int k) {
    Collections.sort(a);
    System.out.println(a);
    LinkedHashMap<Integer, List<List<Integer>>> m = new LinkedHashMap<Integer, List<List<Integer>>>();
    for (int i = 0; i <= a.size() - 3; i++) {
      for (int j = i + 1; j <= a.size() - 2; j++) {
        if (m.get(a.get(i) + a.get(j)) == null) {
          ArrayList<List<Integer>> v = new ArrayList<List<Integer>>();
          List<Integer> c = new ArrayList<Integer>();
          c.add(i);
          c.add(j);
          v.add(c);
          m.put(a.get(i) + a.get(j), v);
        } else {
          List<List<Integer>> v = m.get(a.get(i) + a.get(j));
          List<Integer> c = new ArrayList<Integer>();
          c.add(i);
          c.add(j);
          v.add(c);
          m.put(a.get(i) + a.get(j), v);
        }

      }
    }
    LinkedHashSet<ArrayList<Integer>> res = new LinkedHashSet<ArrayList<Integer>>();
    for (int i = 2; i <= a.size() - 1; i++) {
      for (int j = i + 1; j < a.size(); j++) {
        List<List<Integer>> v = m.get(k - (a.get(i) + a.get(j)));
        if (v != null && v.size() >= 1) {
          for (List<Integer> l : v) {

            if (l.get(0) < l.get(1) && l.get(1) < i && l.get(1) < j) {
              //System.out.println(l.get(0) + " " + l.get(1) + " " + i + " " + j);
              ArrayList<Integer> out = new ArrayList<Integer>();
              out.add(a.get(l.get(0)));
              out.add(a.get(l.get(1)));
              out.add(a.get(i));
              out.add(a.get(j));
              Collections.sort(out);
              //System.out.println(out);
              res.add(out);
            }
          }
        }
      }
    }
    return new ArrayList<ArrayList<Integer>>(res);
  }
}
